# -*- coding: utf-8 -*-
"""Yolo8_training_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vOSD8JRRSX4BiJ7WlmRyHwRuiuEWiREF
"""

import locale
locale.getpreferredencoding = lambda: "UTF-8"

from IPython import display
display.clear_output()
!pip install ultralytics==8.0.134
from ultralytics import YOLO
from ultralytics.yolo.engine.model import yolo
import ultralytics
ultralytics.checks()

import matplotlib.pyplot as plt
from PIL import Image
from IPython.display import display, Image

train_model=True

#trained_model_id=  #yaml
#dataset_id=
#tensorflow_log_file_id=

from google.colab import drive
drive.mount('/content/drive')

from ultralytics.yolo.v8.classify import val
from re import split

if train_model:
  model = YOLO('yolov8n.yaml')  # build a new model from YAML
  model = YOLO('yolov8n.pt')  # load a pretrained model (recommended for training)
  model = YOLO('yolov8n.yaml').load('yolov8n.pt')  # build from YAML and transfer weights

  model.train(data='/content/gdrive/MyDrive/CADCD dataset1/data.yaml', epochs=10, save=True)

  #yolo (task=detect mode=train model=yolov8s.pt data={dataset.location}/data.yaml epochs=5 imgsz=640 plots=True

else:
  model=YOLO("/content/gdrive/MyDrive/Trained Model Weights/best.pt")

# validation of model

metrics = model.val()
metrics.box.map    # map50-95
metrics.box.map50  # map50
metrics.box.map75  # map75
metrics.box.maps

#testing of model on random images

import os
import random
import tensorflow as tf
import cv2 as cv
import sys
import numpy as np
import shutil
from PIL import Image


# Load the image using PIL
image_path = '/content/gdrive/MyDrive/CADCD dataset1/train/images/0000006020.png'

#image = Image.open(image_path)
source = image_path

# Test model on random image
results = model.predict(source, save=True, save_txt=True)

for r in results:
    im_array = r.plot()  # plot a BGR numpy array of predictions
    im = Image.fromarray(im_array[..., ::-1])  # RGB PIL image
    print(r.boxes)
    print(r.masks)
    print(r.keypoints)
    print(r.probs)
    im.show()  # show image

    im.save('results.jpg')

result=results[0]
Image.fromarray(result.plot()[:,:,::-1])

# Export the model
model.export(format='onnx')

# Commented out IPython magic to ensure Python compatibility.
!pip install tensorboard
# %load_ext tensorboard

# Specify the port number for TensorBoard
port_number = 6006

# Start TensorBoard
# %tensorboard --logdir=/content/runs/detect/train2 --port 6007